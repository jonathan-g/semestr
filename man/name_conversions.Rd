% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/name_conversions.R
\name{name_conversions}
\alias{name_conversions}
\alias{type2col}
\alias{type2idx}
\alias{type2prefix}
\alias{type2base}
\alias{idx2col}
\alias{idx2type}
\alias{col2idx}
\alias{col2type}
\alias{base2type}
\title{Metadata Name Conversion Functions}
\usage{
type2col(type)

type2idx(type)

type2prefix(type)

type2base(type)

idx2col(idx)

idx2type(idx)

col2idx(col)

col2type(col)

base2type(base)
}
\arguments{
\item{type}{A type (character)}

\item{idx}{An index (character)}

\item{col}{A column prefix/suffix (character)}

\item{base}{An integer base.#'}

\item{prefix}{A calendar key prefix (character)}
}
\value{
A character or integer value corresponding to the request.
}
\description{
Convert between different types of metadata representing categories of
possible calendar entries.
}
\details{
The kinds of metadata include
\itemize{
\item \strong{type}: A type of calendar entry, in text. "class", "lab", "homework",
"due date", "exam", "holiday", and "event".
\item \strong{idx}: Indices for entries in vectors and lists: "class", "homework",
"due_date", "exam", "holiday", "event", "notice".
\item \strong{col}: A string used as prefix or suffix for a data frame column:
"class", "lab", "hw", "due", "exam", "holiday", "event", "notice".
\item \strong{prefix}: A prefix used to distinguish calendar keys:
"CLS_", "LAB_", "HW_", "DUE_", "EXAM_", "VAC_", and "EVT_".
\item \strong{base}: An integer value used to identify numeric calendar entries.
Multiples of 1000.
}
}
\section{Functions}{
\itemize{
\item \code{type2col}: Convert a type to a column name.

\item \code{type2idx}: Convert a type to an index.

\item \code{type2prefix}: Convert a type to a prefix.

\item \code{type2base}: Convert a type to a base.

\item \code{idx2col}: Convert an index to a column.

\item \code{idx2type}: Convert an index to a type.

\item \code{col2idx}: Convert a column to an index.

\item \code{col2type}: Convert a column to a type.

\item \code{base2type}: Convert a base to a type.
}}

